dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
library(Glimma)
?glMDPlot
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
as.character(rep(1, 5))
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, continous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups)
?glXYPlot
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
glimmaMA(tfit, status=dt, main=colnames(tfit)[2])
library(tidyverse)
install.packages("dplyr")
library(tidyverse)
n_groups <- 3
n_per_group <- 20
genes <- paste0("gene", 1:5)
samples <- paste0("sample", 1:(n_groups * n_per_group))
groups <- rep(paste0("group", 1:n_groups), each = n_per_group)
generated_counts <- crossing(genes, groups) %>%
mutate(mean = sample(1:50, n())) %>%
mutate(vals = map(mean, ~rpois(n_per_group, .)))
counts <- matrix(
unlist(generated_counts$vals),
byrow = TRUE,
nrow = length(genes),
ncol = length(samples),
dimnames = list(genes, samples)
)
sample_anno <- tibble(
sample = samples,
group = groups
)
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_split(gene, .keep = FALSE)
keys <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_keys(gene) %>%
pull(gene)
names(split_counts) <- keys
jsonlite::toJSON(split_counts)
split_counts$gene1
split_counts
split_counts$gene1
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
match.arg(NULL, c("common", "pairwise"))
match.arg(c("common","pairwise"), c("common", "pairwise"))
match.arg("common", c("common", "pairwise"))
match.arg("ComMon", c("common", "pairwise"))
match.arg("common", c("common", "pairwise"))
match.arg("x", c("common", "pairwise"))
match.arg("common", c("common", "pairwise"))
match.arg(c("pairwise","common"), c("common", "pairwise"))
match.arg(c("pairwise","common"), c("pairwise", "common"))
match.arg(c("pairwise"), c("pairwise", "common"))
match.arg("pairwise", c("pairwise", "common"))
class(rnaseq)
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
### DGELIST TYPE ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups)
install.packages("pasilla")
BiocManager::install("pasilla")
### DESeqDataset ###
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
colData
coldata
cts
### DESeqDataset ###
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
### DESeqDataset ###
library("pasilla")
library("DESeq2")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
coldata
groups
glimmaMDS(dds)
cts
glimmaMDS(cts)
glimmaMDS(dds)
### DGELIST TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(dds)
### DESeqDataset TEST ###
invisible(library("pasilla"))
invisible(library("DESeq2"))
library(GlimmaV2)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
glimmaMDS(dds)
### DESeqDataset TEST ###
invisible(library("pasilla"))
invisible(library("DESeq2"))
library(GlimmaV2)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library("pasilla", quietly = TRUE)
### DESeqDataset TEST ###
library("pasilla", quietly=TRUE)
library("DESeq2", quietly=TRUE)
library(GlimmaV2)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
glimmaMDS(dds)
library(DESeq2)
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq.deseq2, groups=groups)
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
glimmaMDS(rnaseq.deseq2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma,)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
glimmaMA(fit, status=dt)
library(GlimmaV2)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
glimmaMA(fit, status=dt, width=1000, height=800)
glimmaMA(fit, status=dt, width=2000, height=1600)
glimmaMA(fit, status=dt, status.colours=c("mediumseagreen","orange","darkviolet"))
glimmaMA(fit, status=dt, status.colours=c("mediumseagreen","orange","darkviolet"), width=2000, height=1600)
