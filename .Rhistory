data.frame(vm$E)
fit$contrasts
fit$contrasts
fit$design
dt
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
cbind(logfc=c(1,2,3))
cbind(sth=c(1,2,3))
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
# object has a bunch of genes
nrow(fit$genes)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData(fit)$data$table
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)$data$table
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)$data$table
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("MA", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
cbind(dt, fit$genes)
cbind(status=dt, fit$genes)
data.frame(status=dt, fit$genes)
name(dt)
dt
dt[,1]
as.vector(dt)
cbind(as.vector(dt), fit$genes)
cbind(status=as.vector(dt), fit$genes)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
rep(1,5)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("MA", fit,  colour=dt)
GlimmaV2("MA", fit)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
rep(1,5)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
rep(1,5)
fit$coefficients
fit$coefficients[, 1]
as.vector(fit$coefficients[, 1])
fit$table
fit$p.value
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
stats::p.adjust(fit$p.value[, 1], method="BH")
ncol(x)
x <- stats::p.adjust(fit$p.value[, 1], method="BH")
ncol(x)
nrow(x)
x <- stats::p.adjust(fit$p.value[, 1], method="BH")
nrow(x)
library(GlimmaV2)
GlimmaV2("MA", fit)
ncol(fit$coefficients)
library(GlimmaV2)
GlimmaV2("MA", fit)
x <- GlimmaV2("MA", fit)
x
library(GlimmaV2)
x <- GlimmaV2("MA", fit)
x
x[0]
x <- GlimmaV2("MA", fit)
x
x[1]
x[2]
data.frame(x[1], x[2])
library(GlimmaV2)
x <- GlimmaV2("MA", fit)
x[2]
data.frame(x[1], x[2])
x
library(GlimmaV2)
x <- GlimmaV2("MA", fit)
x
x <- GlimmaV2("MA", fit)
x
x <- GlimmaV2("MA", fit)
x
x <- GlimmaV2("MA", fit)
x
library(GlimmaV2)
x <- GlimmaV2("MA", fit)
x
x <- GlimmaV2("MA", fit)
x
x <- GlimmaV2("MA", fit)
x
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit, colour=dt)
GlimmaV2("MA", fit, colour=dt)
library(GlimmaV2)
GlimmaV2("MA", fit, colour=dt)
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("GeneID","logCPM","logFC"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("PValue"))
GlimmaV2("MA", fit, colour=dt, display.columns=c("PValue"))
GlimmaV2("MA", fit, colour=dt)
