library(GlimmaV2)
glimmaMA(dds)
glimmaMA(dds)
class(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
glimmaMA(dds)
as.numeric(x$padj<0.05)
library(GlimmaV2)
as.numeric(x$padj<0.05)
glimmaMA(dds)
glMDPlot(dds)
library(Glimma)
glMDPlot(dds)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# general plot
glimmaMA(fit, status=dtFit)
# verify against edgeR
plotMD(fit, status=dtFit)
### TEST: rnaseq-123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
library(Glimma)
glMDPlot(dds)
### Test: DESeqDataset ###
library("pasilla", quietly=TRUE)
library("DESeq2", quietly=TRUE)
library(GlimmaV2)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds)
glimmaMA(dds)
glMDPlot(dds)
glMDPlot(dds,anno=pasAnno)
glMDPlot(dds,anno=colData(dds))
colData(dds)
rowData(dds)
glMDPlot(dds,anno=rowData(dds))
glMDPlot(dds)
glMDPlot(fit)
library(GlimmaV2)
glMDPlot(fit)
glimmaMA(fit)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(Glimma)
library(GlimmaV2)
glimmaMA(dds)
glMDPlot(fit)
glimmaMA(dds)
library(GlimmaV2)
library(Glimma)
glimmaMA(dds)
glMDPlot(fit)
library(GlimmaV2)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
glimmaMA(dds, counts="Yellow")
load(pasilla.RData)
load("pasilla.RData")
load("pasilla.RData")
BiocManager::install("airway")
library(airway)
airway
data("airway")
airway
colData(airway)
coldat <- colData(airway)[, c("cell", "dex")]
true_sv <- model.matrix(~cell + dex, data = coldat)[, -1]
true_sv
airway
glimmaMDS(airway)
library(GlimmaV2)
glimmaMDS(airway)
as.matrix(airway)
library("pasilla")
data("pasilla")
pasilla
library("pasilla")
library("pasilla")
data("pasillaGenes")
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
library(edgeR)
x <- readDGE(files, columns=c(1,3))
x
x$counts
x$counts[, 1:3]
x$counts[, 1:2]
x$counts
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt")
x <- readDGE(files, columns=c(1,3))
x$counts
glimmaMDS(x)
devtools::use_testthat()
install.packages("testthat")
install.packages("testthat")
devtools::use_testthat()
devtools::use_testthat()
install.packages("testthat")
install.packages("testthat")
devtools::use_testthat()
library("devtools")
devtools::use_testthat()
install.packages("testthat")
install.packages("testthat")
devtools::use_testthat()
devtools::test()
library(GlimmaV2)
test_check("GlimmaV2")
test_check("GlimmaV2")
library(GlimmaV2)
install.packages("roxygen2")
install.packages("backports")
install.packages("backports")
install.packages("roxygen2")
install.packages("htmlwidgets")
library(GlimmaV2)
library(GlimmaV2, quietly=TRUE)
install.packages("usethis")
usethis::use_package("htmlwidgets")
library(GlimmaV2)
devtools::test()
library("devtools")
install.packages("devtools")
install.packages("edgeR")
BiocManager::install("edgeR")
install.packages("BiocManager")
BiocManager::install("edgeR")
BiocManager::install("survival")
devtools::test()
install.packages("RColorBrewer")
library(Mus.musculus)
BiocManager::install("Mus.musculus")
BiocManager::install("Glimma")
BiocManager::install("DESeq2")
is_testing()
is_testing()testing_package()
testing_package()
usethis::use_test("glimmaMA")
usethis::use_test("glimmaMDS")
library(GlimmaV2)
install.packages("codecov")
library("testthat")
BiocManager::install("testthat")
use_testthat()
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=900)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
glimmaMDS(rnaseq.deseq2, width=900, prior.count=2)
### DESeqDataset TEST 1 ###
library("DESeq2", quietly=TRUE)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2, width=900, prior.count=2)
BiocManager::install("pasilla")
library(GlimmaV2)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
test <- glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
class(test)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
library(GlimmaV2)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# general plot
test <- glimmaMA(fit, status=dtFit)
class(test)
test
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
# general plot
glimmaMA(fit, status=dtFit)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
all_identical <- function(x) {
reduce(x, `==`)
}
zip_list <- function(...) {
inputs <- list(...)
tibble(...) %>%
group_by(row_number()) %>%
group_split(.keep = FALSE) %>%
as.list()
}
zip_list(name = 1, values = 2)
n_groups <- 2
n_per_group <- 5
genes <- paste0("gene", 1:5)
samples <- paste0("sample", 1:(n_groups * n_per_group))
groups <- rep(paste0("group", 1:n_groups), each = n_per_group)
generated_counts <- crossing(genes, groups) %>%
mutate(mean = sample(1:50, n())) %>%
mutate(vals = map(mean, ~rpois(n_per_group, .)))
counts <- matrix(
unlist(generated_counts$vals),
byrow = TRUE,
nrow = length(genes),
ncol = length(samples),
dimnames = list(genes, samples)
)
sample_anno <- tibble(
sample = samples,
group = groups
)
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_split(gene, .keep = FALSE)
keys <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_keys(gene) %>%
pull(gene)
out <- zip_list(name = keys, values = as.list(split_counts))
unwrap <- function(x) {
out <- as.list(x)
out$name <- jsonlite::unbox(out$name)
out$values <- out$values[[1]]
out
}
enclose_brackets <- function(x) {
paste0("[", x, "]")
}
lapply(out, compose(jsonlite::toJSON, jsonlite::unbox)) %>%
paste(collapse = ",\n") %>%
enclose_brackets() %>%
cat()
