BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp)
xResults$table$logFC
class(xRes)
xRes <- xResults
x$samples$group
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp, pair=c("LP","ML"))
glimmaMA(xResults)
xResults$comparison
cat(xResults$comparison)
cat(xResults$comparison[1] + "vs" + xResults$comparison[2])
xResults$comparison[1] + "vs" + xResults$comparison[2])
xResults$comparison[1] + "vs" + xResults$comparison[2]
cat(xResults$comparison[1],"vs",xResults$comparison[2])
glimmaMA(xResults)
plotMDS(xResults)
plotMA(xResults)
library(limma)
plotMA(xResults)
plotMD(xResults)
plotMD(xResults)
xResults <- exactTest(xDisp, pair=c("ML","LP"))
xResults <- exactTest(xDisp, pair=c("ML","LP"))
plotMD(xResults)
glimmaMA(xResults)
plotMD(xResults)
glimmaMA(xResults)
library(GlimmaV2)
glimmaMA(xResults)
plotMD(xResults)
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp, pair=c("ML","LP"))
glimmaMA(xResults)
plotMD(xResultsp)
plotMD(xResults)
S4Vectors::as.data.frame.DataTable()
S4Vectors::as.data.frame.DataTable
library(S4Vectors)
?S4Vectors
??S4Vectors
## TEST: DGELRT ##
d <- matrix(rnbinom(16,size=1,mu=10),4,4)
rownames(d) <- c("a","b","c","d")
colnames(d) <- c("A1","A2","B1","B2")
rownames(d) <- c("a","b","c","d")
d <- DGEList(counts=d,group=factor(c("A","A","B","B")))
d[1:2,2]
d
d <- estimateCommonDisp(d)
results <- exactTest(d)
d$samples$group
results <- exactTest(d)
results
results$comparison
glimmaMA(results)
class(results)
results
glimmaMA(results)
results$genes
glimmaMA(results)
plotMD(results)
glimmaMA(results)
# test general plot (final column)
library(GlimmaV2)
glimmaMA(tfit)
# test general plot (final column)
glimmaMA(tfit)
plotMD(tfit, status=dt[,3])
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
### DESeqDataset TEST 1 ###
library("DESeq2", quietly=TRUE)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2, width=900, prior.count=2)
glmFit(x, design)
x <- estimateDisp(x, design, robust=TRUE)
x <- estimateDisp(x, design)
xGlm <- glmFit(x, design)
xGlm
lrt <- glmLRT(xGlm)
lrt
glimmaMA(lrt)
glimmaMA(lrt)
glimmaMA(lrt)
lrt$comparison
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
# general plot
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno) %>%
jsonlite::toJSON()
return(split_counts)
}
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
library(GlimmaV2)
x <- formatCounts(rnaseq$counts, rnaseq$samples$group)
# general plot
library("tidyverse")
# general plot
library("tidyverse")
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno) %>%
jsonlite::toJSON()
return(split_counts)
}
x <- formatCounts(rnaseq$counts, rnaseq$samples$group)
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
dim(x)
class(x)
# general plot
library("tidyverse")
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno) %>%
return(split_counts)
}
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
# general plot
library("tidyverse")
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
return(split_counts)
}
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
class(x)
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
class(x)
dim(x)
x[1:100,]
x
names(x)
x
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=rnaseq$counts, groups=as.data.frame(rnaseq$samples$group))
# general plot
library("tidyverse")
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno) %>%
group_split(gene, .keep = FALSE)
return(split_counts)
}
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=rnaseq$counts, groups=as.data.frame(rnaseq$samples$group))
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
nrow(rnaseq)
library(GlimmaV2)
ncol(rnaseq)
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
rnaseq$counts
names(rnaseq$counts)
rnaseq$genes
names(rnaseq$genes)
colnames(rnaseq$genes)
rownmaes(rnaseq$genes)
rownames(rnaseq$genes)
rownames(rnaseq$counts)
names(rnaseq$counts) <- rownames(rnaseq$counts)
names(rnaseq$counts) <- rownames(rnaseq$counts)
rnaseq$counts
names(rnaseq$counts) <- rownames(rnaseq$counts)
rnaseq$counts$
rnaseq$counts <- data.frame(rnaseq$counts)
rnaseq$counts <- data.frame(rnaseq$counts)
names(rnaseq$counts) <- rownames(rnaseq$counts)
rnaseq$counts <- data.frame(rnaseq$counts)
rnaseq$counts
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
library(GlimmaV2)
glimmaMA(fit, counts=rnaseq$counts, groups=rnaseq$samples$group)
rnaseq$counts
cbind(rnaseq$counts, gene=rnaseq$counts)
data.frame(cbind(rnaseq$counts, gene=rnaseq$counts))
data.frame(cbind(rnaseq$counts, gene=rownames(rnaseq$counts)))
library(GlimmaV2)
library(GlimmaV2)
counts <- rnaseq$counts
groups <- data.frame(group=rnaseq$samples$group,sample=rnaseq$samples
groups <- data.frame(group=rnaseq$samples$group,sample=rnaseq$samples)
groups <- as.data.frame(group=rnaseq$samples$group, sample=rnaseq$samples)
rnaseq$samples
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
groups
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
glimmaMA(fit,width=900)
glimmaMA(fit,width=900)
# general plot
glimmaMA(fit,width=900)
# general plot
glimmaMA(fit,width=900)
# general plot
glimmaMA(fit,width=900)
# general plot
glimmaMA(fit,width=900)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
counts <- rnaseq$counts
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
rnaseq$samples$group
groups
rnaseq$counts
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
counts <- rnaseq$counts
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
# general plot
library("tidyverse")
formatCounts <- function(counts, anno)
{
anno <- cbind(anno, sample=colnames(counts))
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(colnames(counts), names_to = "sample", values_to = "count") %>%
left_join(anno) %>%
group_split(gene, .keep = FALSE)
return(split_counts)
}
counts <- rnaseq$counts
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
groups
counts
data.frame(counts)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
rownames(counts)
colnames(counts)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
counts <- rnaseq$counts
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=data.frame(counts), groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
counts <- data.frame(rnaseq$counts)
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(rnaseq))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
groups
library(GlimmaV2)
rnaseq$samples$group
colnames(rnaseq)
colnames(counts)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
counts <- data.frame(rnaseq$counts)
counts <- data.frame(rnaseq$counts)
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(counts))
counts
groups
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
# general plot
x <- formatCounts(rnaseq$counts, as.data.frame(rnaseq$samples$group))
counts <- data.frame(rnaseq$counts)
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(counts))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit,  width=1200, height=1000)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
# general plot
counts <- data.frame(rnaseq$counts)
groups <- data.frame(group=rnaseq$samples$group, sample=colnames(counts))
glimmaMA(fit,  width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
# general plot
counts <- data.frame(rnaseq$counts)
groups <- data.frame(group=c("group1","group2","group3","group2",
"group2", "group1", "group3"), sample=colnames(counts))
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
glimmaMA(fit, counts=counts, groups=groups, width=1200, height=1000)
