}
expData <- data.frame(
Sample = samples,
cols = as.hexcol(sample.cols),
Group = groups,
counts)
expData
}
# object has a bunch of genes
nrow(fit$genes)
# fold change is the attribute here
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is fold change (Smchd1null vs WT)
# data.frame(fit$coefficients)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
library(GlimmaV2)
library(GlimmaV2)
library(GlimmaV2)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
GlimmaV2(plotType ="MDS", rnaseq, groups=groups)
library(GlimmaV2)
GlimmaV2(plotType ="MDS", rnaseq, groups=groups)
library(GlimmaV2)
GlimmaV2(plotType ="MDS", rnaseq, groups=groups)
GlimmaV2("MA", fit)
vm
vm$E
data.frame(vm$E)
MockGlimmaV2 <- function(
plotType,
x,
width = NULL,
height = NULL,
elementId = NULL,
...)
{
# create xData depending on type of plot
if (plotType == "MDS")
{
xData <- prepareMDSData(x, ...)
}
else if (plotType == "MA")
{
# for now assume fit object
logcpm <- unname(x$Amean)
logfc <- unname(x$coefficients[,1])
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
names <- names(x$Amean)
table <- cbind(x$genes, logcpm=logcpm, logfc=logfc)
data = list(x="logcpm", y="logfc", table=table, cols=colnames(table))
xData <- list(plotType=plotType, data=data)
}
else
{
stop("Please enter a valid plotType arg in ['MDS', 'MA'].")
}
return(data)
}
data.frame(vm$E)
MockGlimmaV2("MA", fit, counts=vm$E)
MockGlimmaV2 <- function(
plotType,
x,
width = NULL,
height = NULL,
elementId = NULL,
...)
{
# create xData depending on type of plot
if (plotType == "MDS")
{
xData <- prepareMDSData(x, ...)
}
else if (plotType == "MA")
{
# for now assume fit object
logcpm <- unname(x$Amean)
logfc <- unname(x$coefficients[,1])
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
names <- names(x$Amean)
table <- cbind(x$genes, logcpm=logcpm, logfc=logfc)
data = list(x="logcpm", y="logfc", table=table, cols=colnames(table))
xData <- list(plotType=plotType, data=data)
}
else
{
stop("Please enter a valid plotType arg in ['MDS', 'MA'].")
}
return(data)
}
data.frame(vm$E)
data.frame(MockGlimmaV2("MA", fit, counts=vm$E))
MockGlimmaV2 <- function(
plotType,
x,
width = NULL,
height = NULL,
elementId = NULL,
...)
{
# create xData depending on type of plot
if (plotType == "MDS")
{
xData <- prepareMDSData(x, ...)
}
else if (plotType == "MA")
{
# for now assume fit object
logcpm <- unname(x$Amean)
logfc <- unname(x$coefficients[,1])
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
names <- names(x$Amean)
table <- cbind(x$genes, logcpm=logcpm, logfc=logfc)
data = list(x="logcpm", y="logfc", table=table, cols=colnames(table))
xData <- list(plotType=plotType, data=data)
}
else
{
stop("Please enter a valid plotType arg in ['MDS', 'MA'].")
}
return(table)
}
data.frame(vm$E)
MockGlimmaV2("MA", fit, counts=vm$E)
MockGlimmaV2 <- function(
plotType,
x,
width = NULL,
height = NULL,
elementId = NULL,
...)
{
# create xData depending on type of plot
if (plotType == "MDS")
{
xData <- prepareMDSData(x, ...)
}
else if (plotType == "MA")
{
# for now assume fit object
logcpm <- unname(x$Amean)
logfc <- unname(x$coefficients[,1])
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
names <- names(x$Amean)
table <- cbind(x$genes, logcpm=logcpm, logfc=logfc)
if (!is.null(counts)) { table <- cbind(table, counts) }
data = list(x="logcpm", y="logfc", table=table, cols=colnames(table))
xData <- list(plotType=plotType, data=data)
}
else
{
stop("Please enter a valid plotType arg in ['MDS', 'MA'].")
}
return(table)
}
data.frame(vm$E)
MockGlimmaV2("MA", fit, counts=vm$E)
MockGlimmaV2 <- function(
plotType,
x,
counts=NULL,
width = NULL,
height = NULL,
elementId = NULL,
...)
{
# create xData depending on type of plot
if (plotType == "MDS")
{
xData <- prepareMDSData(x, ...)
}
else if (plotType == "MA")
{
# for now assume fit object
logcpm <- unname(x$Amean)
logfc <- unname(x$coefficients[,1])
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
names <- names(x$Amean)
table <- cbind(x$genes, logcpm=logcpm, logfc=logfc)
if (!is.null(counts)) { table <- cbind(table, counts) }
data = list(x="logcpm", y="logfc", table=table, cols=colnames(table))
xData <- list(plotType=plotType, data=data)
}
else
{
stop("Please enter a valid plotType arg in ['MDS', 'MA'].")
}
return(table)
}
data.frame(vm$E)
MockGlimmaV2("MA", fit, counts=vm$E)
t(counts)
t(data.frame(vm$E))
data.frame(vm$E)
fit$contrasts
fit$contrasts
fit$design
dt
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
cbind(logfc=c(1,2,3))
cbind(sth=c(1,2,3))
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
# object has a bunch of genes
nrow(fit$genes)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData(fit)$data$table
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)$data$table
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- cbind(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
return(table)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
prepareXYData(fit)$data$table
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
GlimmaV2("MA", fit)
library(GlimmaV2)
library(GlimmaV2)
GlimmaV2("MA", fit)
GlimmaV2("MA", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("MA", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
cbind(dt, fit$genes)
cbind(status=dt, fit$genes)
data.frame(status=dt, fit$genes)
name(dt)
dt
dt[,1]
as.vector(dt)
cbind(as.vector(dt), fit$genes)
cbind(status=as.vector(dt), fit$genes)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", status=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
rep(1,5)
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
library(GlimmaV2)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds")
GlimmaV2("XY", fit, xvals=fit$coef, yvals=fit$lod, xlab="logFC", ylab="logodds", colour=dt)
GlimmaV2("MA", fit,  colour=dt)
