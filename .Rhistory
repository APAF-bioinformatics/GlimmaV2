library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
glimmaMA(fit, status=dt)
library(GlimmaV2)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
library(GlimmaV2)
glimmaMA(fit, status=dt)
glimmaMA(fit, status=dt, width=1000, height=800)
glimmaMA(fit, status=dt, width=2000, height=1600)
glimmaMA(fit, status=dt, status.colours=c("mediumseagreen","orange","darkviolet"))
glimmaMA(fit, status=dt, status.colours=c("mediumseagreen","orange","darkviolet"), width=2000, height=1600)
library(GlimmaV2)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
### DESeqDataset TEST 1 ###
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
### DESeqDataset TEST 1 ###
library("DESeq2", quietly=TRUE)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2)
### DESeqDataset TEST 1 ###
library("DESeq2", quietly=TRUE)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2, width=900, prior.count=2)
?glMDSPlot
library(GlimmaV2)
?glimmaMDS
??glimmaMDS
?glimmaMDS
library(GlimmaV2)
?glimmaMDS
library(GlimmaV2)
?glimmaMDS
?glMDSPlot
?glMDSPlot.default
library(GlimmaV2)
library(GlimmaV2)
?glimmaMDS
?glimmaMDS.default
?glMDSPlot
library(GlimmaV2)
library(GlimmaV2)
?glimmaMDS
library(GlimmaV2)
?glimmaMDS
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=900)
xlab <- "hello"
c(xlab)
c(xlab, "new")
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
glimmaMA(fit, status=dt, width=2000, height=1600)
library(GlimmaV2)
glimmaMA(fit, status=dt, width=2000, height=1600)
glimmaMA(fit)
glimmaMA(fit, status=dt, width=2000, height=1600)
glimmaMA(fit, status=dt, status.colours=c("#DD7373","#3B3561","#51A3A3"))
glimmaMA(fit, status=1:3, status.colours=c("#DD7373","#3B3561","#51A3A3"))
fit
fit$coefficients
fit$coefficients[,1]
fit$coefficients[,2]
fit$coefficients[,3]
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
glimmaMA(tfit, status=dt)
# edgeR for comparison
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(-8,13))
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1])
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(-8,13))
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1])
plotMD(tfit, column=2, status=dt[,2], main=colnames(tfit)[2])
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
glimmaMA(tfit, coef=1, status=dt, main=colnames(tfit)[1])
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1])
glimmaMA(tfit, coef=1, status=dt)
glimmaMA(tfit, status=dt,  coef=1)
glimmaMA(tfit, status=dt,  coef=1)
glimmaMA(tfit, status=dt,  coef=1)
glimmaMA(tfit, status=dt,  coef=2)
glimmaMA(tfit, status=dt)
plotMD(tfit, column=2, status=dt[,2], main=colnames(tfit)[2])
glimmaMA(tfit, status=dt)
colnames(tfit)
plotMD(tfit, column=3, status=dt[,3], main=colnames(tfit)[3])
glimmaMA(tfit, status=dt)
glimmaMA(tfit, status=dt)
glimmaMA(tfit, status=dt)
plotMD(tfit, column=3, status=dt[,3], main=colnames(tfit)[3])
plotMD(tfit, status)
plotMD(tfit, status=dt)
# test general plot
glimmaMA(tfit, status=dt)
plotMD(tfit, column=3, status=dt, main=colnames(tfit)[3])
plotMD(tfit, column=3, status=dt, main=colnames(tfit)[3])
plotMD(tfit, status=dt)
plotMD(tfit, status=dt[,3])
# test general plot (final column)
glimmaMA(tfit, status=dt)
glimmaMA(fit, status=dt)
dtFit <- decideTests(fit)
glimmaMA(fit, status=dtFit)
plotMD(fit, status=dtFit)
# test status.colours
glimmaMA(tfit, status=dt, status.colours=c("#DD7373","#3B3561","#51A3A3"))
# test applying coef
glimmaMA(tfit, status=dt,  coef=2)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
glimmaXY(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds", status=dtFit, anno=fit$genes)
glimmaXY(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds", status=dtFit)
name(fit$coef)
glimmaXY(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds", status=dtFit, anno=fit$genes)
