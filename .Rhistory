htmlwidgets::saveWidget(x1, "x1.html")
# volcano plot
x1 <- glimmaXT("XY", fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY("XY", fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
install.packages("digest")
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
install.packages("rlang")
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
install.packages(edgeR)
install.packages("edgeR")
library(Glimma)
library(Glimma)
library(Glimma)
library(Glimma)
library(Glimma)
library(Glimma)
BiocManager::install("Glimma")
library(Glimma)
install.packages("locFit")
install.packages("locfit")
library(Glimma)
install.packages("Rcpp")
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
BiocManager::install("Glimma")
glMDPlot(fit, status=dt, counts=vm, side.main="Symbols")
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
x1
install.packages("yaml")
# volcano plot
x1 <- glimmaXY(fit, xlab="logfc", ylab="lodds", xval=fit$coefficients[,1], yval=fit$lods,colour=dt)
x1
nrow(table(1:15))
1:nrow(table(1:15))
table <- table(2:26)
newvals <- c(`-1`="downreg",`0`="normal",`1`="upreg")
anno <- data.frame(newvals[as.character(dt)])
table <- data.frame(2:26)
cbind(secret_id=1:nrow(table), table )
library(GlimmaV2)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
library(GlimmaV2)
glMDPlot(fit, status=dt, counts=vm, side.main="Symbols")
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
# volcano plot
library(GlimmaV2)
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
library(GlimmaV2)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
library(GlimmaV2)
library(GlimmaV2)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, xlab="logfc", ylab="lodds", colour=dt)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, colour=dt)
# volcano plot
glimmaXY(x=fit$coefficients[,1], y=fit$lods, anno=fit$genes, colour=dt)
glimmaMA(fit, colour=dt)
glimmaXY(x=fit$coefficients[,1], y=fit$lods, anno=fit$genes, status=dt)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
fit$design
fit$design
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
exp <- vm$E
# exp <- cbind(exp, c(1))
# exp
fit$design[1:ncol(exp)]
newvals <- c(`-1`="downreg",`0`="normal",`1`="upreg")
anno <- data.frame(newvals[as.character(dt)])
table <- data.frame(2:26)
cbind(secret_id=1:nrow(table), table )
glimmaMA(fit, anno=colour=dt)
glimmaMA(fit, colour=dt)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
fit$design
fit$design
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
exp <- vm$E
# exp <- cbind(exp, c(1))
# exp
fit$design[1:ncol(exp)]
newvals <- c(`-1`="downreg",`0`="normal",`1`="upreg")
anno <- data.frame(newvals[as.character(dt)])
table <- data.frame(2:26)
cbind(secret_id=1:nrow(table), table )
glimmaMA(fit, colour=dt)
glMA <- glimmaMA(fit, colour=dt)
glMA <- glimmaMA(fit, colour=dt)
htmlwidgets::saveWidget(glMA, file="glMA.html")
glMA <- glimmaMA(fit, colour=dt)
htmlwidgets::saveWidget(glMA, file="glMA.html", )
glimmaMA(fit, colour=dt)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
fit$design
fit$design
prepareXYData <- function(
x,
xvals=NULL,
yvals=NULL,
xlab=NULL,
ylab=NULL,
status=NULL)
{
# assume MA plot if no x/y are given
if (is.null(xvals) && is.null(yvals))
{
# for now assume fit object
xvals <- unname(x$Amean)
xlab <- "logcpm"
yvals <- unname(x$coefficients[,1])
ylab <- "logfc"
stopifnot(all(names(x$Amean) == names(x$coefficients[,1])))
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table <- cbind(table, x$genes)
}
else
{
}
data <- list(x=xlab, y=ylab, table=table, cols=colnames(table))
return(list(plotType="XY", data=data))
}
exp <- vm$E
# exp <- cbind(exp, c(1))
# exp
fit$design[1:ncol(exp)]
newvals <- c(`-1`="downreg",`0`="normal",`1`="upreg")
anno <- data.frame(newvals[as.character(dt)])
glimmaXY(x=fit$coefficients[,1], y=fit$lods, status=dt)
glimmaXY(x=fit$coefficients[,1], y=fit$lods, colour=dt)
library(GlimmaV2)
glimmaXY(x=fit$coefficients[,1], y=fit$lods, colour=dt)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
?glMDPlot
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, colour.continuous=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
?glMDSPlot
glimmaMDS(rnaseq, groups=groups, labels=c("a", "b", "c", "d", "e", "f", "g"))
glMDSPlot(rnaseq, groups=groups, labels=c("a", "b", "c", "d", "e", "f", "g"))
glimmaMDS(rnaseq, groups=groups, labels=c("a", "b", "c", "d", "e", "f", "g"))
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, labels=c("a", "b", "c", "d", "e", "f", "g"))
glMDSPlot(rnaseq, groups=groups)
glMDSPlot(rnaseq)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups, labels=c("a", "b", "c", "d", "e", "f", "g"))
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
as.factor(seq_len(5))
as.character(seq_len(5))
is.character(seq_len(5))
is.character(as.character(seq_len(5)))
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
sapply(groups, is.character)
sapply(groups, is.factor)
groups
is.character(as.factor(seq_len(5)))
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups)
library(GlimmaV2)
glimmaMDS(rnaseq, groups=groups)
as.character(seq_len(5))
x$samples
rnaseq$samples
rnaseq$samples$group
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq)
glimmaMDS(rnaseq)
glimmaMDS(rnaseq)
glimmaMDS(rnaseq)
as.character(rep(1, 5))
glimmaMDS(rnaseq)
glimmaMDS(rnaseq)
glimmaMDS(rnaseq)
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, labels=c("a","b","c","d","e","f","g"))
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, labels=c("hello","another","thing","thing","thing3","f","g"))
class(rnaseq)
library(DESeq2)
install.packages("DESeq2")
install.packages("DESeq2")
install.packages("DESeq2")
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
packageVersion("DBI")
install.packages("DBI")
install.packages("DBI")
library(DESeq2)
install.packages("GenomeInfoDb")
BiocManager::install("GenomeInfoDb")
library(DESeq2)
BiocManager::install("BiocParallel")
library(DESeq2)
library(DESeq2)
library(DESeq2)
library(DESeq2)
library(BiocParallel)
BiocManager::install("BiocParallel")
library(DESeq2)
library(DESeq2)
library(DESeq2)
library(DESeq2)
library(DESeq2)
BiocManager::install("BiocParallel")
library(DESeq2)
BiocManager::install("sclaes")
BiocManager::install("scales")
library(DESeq2)
BiocManager::install("glue")
library(DESeq2)
BiocManager::install("tibble")
library(DESeq2)
BiocManager::install("stringi")
library(DESeq2)
BiocManager::install("XML")
library(DESeq2)
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
mcols(rnaseq.deseq2) <- DataFrame(mcols(rnaseq.deseq2), rnaseq$genes)
rnaseq.deseq2 <- DESeq(rnaseq.deseq2)
class(rnaseq.deseq2)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
class(rnaseq.deseq2)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
rnaseq.deseq2
rnaseq.deseq2$sampleID
rnaseq.deseq2$group
rnaseq.deseq2$norm.factors
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
S4Vectors::as.data.frame.DataTable(SummarizedExperiment::colData(rnaseq.deseq2))
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
library(DESeq2)
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2)
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
glimmaMDS(rnaseq.deseq2)
SummarizedExperiment::colData(x)
SummarizedExperiment::colData(rnaseq.deseq2)
rownames(SummarizedExperiment::colData(rnaseq.deseq2))
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
library(GlimmaV2)
glimmaMDS(rnaseq.deseq2)
glimmaMDS(rnaseq.deseq2)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq.deseq2, groups=groups)
