groups=x$samples)
library(GlimmaV2)
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(GlimmaV2)
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
install.packages("brewer.pal")
install.packages("brewer")
install.packages("RColorBrewer")
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
library(RColorBrewer)
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, statusdt)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("yellow","blue","magenta"))
library(GlimmaV2)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("yellow","blue","magenta"))
library(GlimmaV2)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("yellow","blue","magenta"))
library(GlimmaV2)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("yellow","blue","magenta"))
library(GlimmaV2)
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("yellow","blue","magenta"))
glimmaXY(x=fit$coefficients[, 1],y=fit$lods, status=dt, status.colours=c("mediumseagreen","black","darkviolet"))
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
?glMDPlot
library(Glimma)
?glMDPlot
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
group
lane
group+lane
~group+lane
~group+lane
model.matrix(~group+lane)
model.matrix(~0+group+lane)
contr.matrix
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
v
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
summary(decideTests(efit))
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
class(tfit)
glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="ENTREZID", counts=lcpm, groups=group, launch=FALSE)
glimmaMA(tfit, coef=1, status=dt, main=colnames(tfit)[1])
glimmaMA(tfit, coef=1, status=dt)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1)
tfit
tfit$genes
glimmaMA(tfit, coef=1)
library(GlimmaV2)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1)
library(GlimmaV2)
glimmaMA(tfit, coef=1)
library(GlimmaV2)
glimmaMA(tfit, coef=1)
library(GlimmaV2)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1)$data$table
glimmaMA(tfit, coef=1)$data$table
library(GlimmaV2)
glimmaMA(tfit, coef=1)
library(GlimmaV2)
glimmaMA(tfit, coef=1)
glimmaMA(tfit, coef=1, status=dt)
length(state)
length(status)
length(dt)
length(tfit)
nrow(tfit)
glimmaMA(tfit, coef=1, status=dt[,1])
dt
is.matrix(dt)
is.matrix(1:5)
nrow(status)
nrow(dt)
nrow(1:5)
1:5
1:5[]
1:5[,1]
1:5[,1]
1:5[,1]
1:5
library(GlimmaV2)
glimmaMA(tfit, coef=1, status=dt[,1])
glimmaMA(tfit, coef=1, status=dt)
glimmaMA(tfit, coef=2, status=dt)
ncol(tfit)
glimmaMA(tfit, coef=3, status=dt)
glimmaMA(tfit[,1], status=dt[,2])
tfit[,1]
dim(tfit[,1])
dim(dt[,2])
dt[,2]
length(dt[,2])
length(tfit[,1])
nrow(tfit[,1])
nrow(tfit[,2])
nrow(tfit[,3])
glimmaMA(tfit[,1], status=1:5)
?glXYPlot
glimmaXY(1:5, 2:7, status)
glimmaXY(1:5, 10:15, status)
glimmaXY(1:5, 10:15)
glimmaXY(1:5, 11:15)
library(GlimmaV2)
glimmaXY(1:5, 11:15)
glimmaXY(1:5, 11:15,main="Hello")
library(GlimmaV2)
glimmaXY(1:5, 11:15,main="Hello")
glimmaMA(tfit, coef=2, status=dt)
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[1])
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
tfit
colnames(fit)
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# 7 samples
# each instance is a gene
# attribute is number of counts per sample
# data.frame(rnaseq$counts)
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
# log cpm is the attribute here
# averaged across all arrays in the original linear model fit
# each instance is a gene;
# the col vector names are the geneIDs
# the col vector attribute is mean expression
# data.frame(fit$Amean)
# for now assume fit object
# this is where info for the MD scatter plot comes from!
# data.frame(vm$E)
# fit$design
fit$design
fit$design
fit$design[1:ncol(exp)]
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
colnames(fit)
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
library(Glimma)
?glMDPlot
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
nrow(parameter.type)
as.character(rep(1, 5))
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
library(RColorBrewer)
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
library(Glimma)
?glMDPlot
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
as.character(rep(1, 5))
# need old Glimma for this dataset
library(Glimma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
groups
glimmaMDS(rnaseq, groups=groups)
glimmaMDS(rnaseq, groups=groups, continous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups)
?glXYPlot
glimmaMA(tfit, coef=2, status=dt, main=colnames(tfit)[2])
glimmaMA(tfit, status=dt, main=colnames(tfit)[2])
library(tidyverse)
install.packages("dplyr")
library(tidyverse)
n_groups <- 3
n_per_group <- 20
genes <- paste0("gene", 1:5)
samples <- paste0("sample", 1:(n_groups * n_per_group))
groups <- rep(paste0("group", 1:n_groups), each = n_per_group)
generated_counts <- crossing(genes, groups) %>%
mutate(mean = sample(1:50, n())) %>%
mutate(vals = map(mean, ~rpois(n_per_group, .)))
counts <- matrix(
unlist(generated_counts$vals),
byrow = TRUE,
nrow = length(genes),
ncol = length(samples),
dimnames = list(genes, samples)
)
sample_anno <- tibble(
sample = samples,
group = groups
)
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_split(gene, .keep = FALSE)
keys <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_keys(gene) %>%
pull(gene)
names(split_counts) <- keys
jsonlite::toJSON(split_counts)
split_counts$gene1
split_counts
split_counts$gene1
