dtFit <- decideTests(fit)
# general plot
test <- glimmaMA(fit, status=dtFit)
class(test)
test
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=1200, height=900)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit)
# general plot
glimmaMA(fit, status=dtFit)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
all_identical <- function(x) {
reduce(x, `==`)
}
zip_list <- function(...) {
inputs <- list(...)
tibble(...) %>%
group_by(row_number()) %>%
group_split(.keep = FALSE) %>%
as.list()
}
zip_list(name = 1, values = 2)
n_groups <- 2
n_per_group <- 5
genes <- paste0("gene", 1:5)
samples <- paste0("sample", 1:(n_groups * n_per_group))
groups <- rep(paste0("group", 1:n_groups), each = n_per_group)
generated_counts <- crossing(genes, groups) %>%
mutate(mean = sample(1:50, n())) %>%
mutate(vals = map(mean, ~rpois(n_per_group, .)))
counts <- matrix(
unlist(generated_counts$vals),
byrow = TRUE,
nrow = length(genes),
ncol = length(samples),
dimnames = list(genes, samples)
)
sample_anno <- tibble(
sample = samples,
group = groups
)
counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno)
split_counts <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_split(gene, .keep = FALSE)
keys <- counts %>%
as_tibble() %>%
mutate(gene = rownames(counts)) %>%
pivot_longer(contains("sample"), names_to = "sample", values_to = "count") %>%
left_join(sample_anno) %>%
group_keys(gene) %>%
pull(gene)
out <- zip_list(name = keys, values = as.list(split_counts))
unwrap <- function(x) {
out <- as.list(x)
out$name <- jsonlite::unbox(out$name)
out$values <- out$values[[1]]
out
}
enclose_brackets <- function(x) {
paste0("[", x, "]")
}
lapply(out, compose(jsonlite::toJSON, jsonlite::unbox)) %>%
paste(collapse = ",\n") %>%
enclose_brackets() %>%
cat()
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, width=900)
glimmaMDS(rnaseq, groups=groups, width=900, continuous.colour = TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
library(edgeR)
library(Mus.musculus)
library(GlimmaV2)
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
class(x)
dim(x)
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
x
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
summary(lcpm)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
glimmaMDS(lcpm, labels=paste(group, lane, sep="_"),
groups=x$samples)
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
class(tfit)
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
?plotMD
class(x)
estimateCommonDisp(x)
class(estimateCommonDisp(x))
exactTest(d)
exactTest(x)
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp)
class(xResults)
?glmFit
?glmLRT
xResults
xResults$comparison
xResults$genes
xResults$table
# test general plot (final column)
glimmaMA(tfit, status=dt)
plotMD(tfit, status=dt[,3])
nrow(xResults)
nrow(xResults$genes)
xResults$comparison
xResults$table
# create initial table with logCPM and logFC features
xvals <- unname()
x <- xResults
# create initial table with logCPM and logFC features
xvals <- x$table$logCPM
if (is.null(xlab)) xlab <- "logCPM"
if (is.null(ylab)) ylab <- "logFC"
table <- data.frame(xvals, yvals)
yvals <- x$table$logFC
table <- data.frame(xvals, yvals)
table
if (is.null(xlab)) xlab <- "logCPM"
if (is.null(ylab)) ylab <- "logFC"
xlab <- NULL
ylab <- NULL
names(table) <- c(xlab, ylab)
table
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
# create initial table with logCPM and logFC features
xvals <- x$table$logCPM
yvals <- x$table$logFC
xlab <- NULL
ylab <- NULL
if (is.null(xlab)) xlab <- "logCPM"
if (is.null(ylab)) ylab <- "logFC"
table <- data.frame(xvals, yvals)
names(table) <- c(xlab, ylab)
table
glimmaMA(x)
stats::p.adjust(x$table$PValue, method=p.adj.method)
stats::p.adjust(x$table$PValue)
x$genes
rownames(x$genes)
x$genes
library(GlimmaV2)
glimmaMA(x)
glimmaMA(x)
help("DGEGLM-class")
help("DGEExact-class")
help("DGEGLM-class")
help("DGELRT-class")
help("glmFit")
help("DGEGLM")
decideTestsDGE(x)
edgeR::decideTestsDGE(x)
library(GlimmaV2)
glimmaMA(x)
class(x)
### TEST: rnaseq-123 dataset (MArrayLM) ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
par(mfrow=c(1,2))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
tfit <- treat(vfit, lfc=1)
dt <- decideTests(tfit)
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp)
xResults$table$logFC
class(xRes)
xRes <- xResults
x$samples$group
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp, pair=c("LP","ML"))
glimmaMA(xResults)
xResults$comparison
cat(xResults$comparison)
cat(xResults$comparison[1] + "vs" + xResults$comparison[2])
xResults$comparison[1] + "vs" + xResults$comparison[2])
xResults$comparison[1] + "vs" + xResults$comparison[2]
cat(xResults$comparison[1],"vs",xResults$comparison[2])
glimmaMA(xResults)
plotMDS(xResults)
plotMA(xResults)
library(limma)
plotMA(xResults)
plotMD(xResults)
plotMD(xResults)
xResults <- exactTest(xDisp, pair=c("ML","LP"))
xResults <- exactTest(xDisp, pair=c("ML","LP"))
plotMD(xResults)
glimmaMA(xResults)
plotMD(xResults)
glimmaMA(xResults)
library(GlimmaV2)
glimmaMA(xResults)
plotMD(xResults)
## TEST: DGELRT ##
xDisp <- estimateCommonDisp(x)
xResults <- exactTest(xDisp, pair=c("ML","LP"))
glimmaMA(xResults)
plotMD(xResultsp)
plotMD(xResults)
S4Vectors::as.data.frame.DataTable()
S4Vectors::as.data.frame.DataTable
library(S4Vectors)
?S4Vectors
??S4Vectors
## TEST: DGELRT ##
d <- matrix(rnbinom(16,size=1,mu=10),4,4)
rownames(d) <- c("a","b","c","d")
colnames(d) <- c("A1","A2","B1","B2")
rownames(d) <- c("a","b","c","d")
d <- DGEList(counts=d,group=factor(c("A","A","B","B")))
d[1:2,2]
d
d <- estimateCommonDisp(d)
results <- exactTest(d)
d$samples$group
results <- exactTest(d)
results
results$comparison
glimmaMA(results)
class(results)
results
glimmaMA(results)
results$genes
glimmaMA(results)
plotMD(results)
glimmaMA(results)
# test general plot (final column)
library(GlimmaV2)
glimmaMA(tfit)
# test general plot (final column)
glimmaMA(tfit)
plotMD(tfit, status=dt[,3])
library(GlimmaV2)
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
### DESeqDataset TEST 1 ###
library("DESeq2", quietly=TRUE)
rnaseq.deseq2 <- DESeqDataSetFromMatrix(rnaseq$counts, colData=rnaseq$samples, design=~group)
glimmaMDS(rnaseq.deseq2, width=900, prior.count=2)
glmFit(x, design)
x <- estimateDisp(x, design, robust=TRUE)
x <- estimateDisp(x, design)
xGlm <- glmFit(x, design)
xGlm
lrt <- glmLRT(xGlm)
lrt
glimmaMA(lrt)
glimmaMA(lrt)
glimmaMA(lrt)
lrt$comparison
