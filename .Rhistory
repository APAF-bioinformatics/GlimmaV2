"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
library(Mus.musculus, quietly=TRUE)
# estimate dispersion
x <- estimateDisp(x, design)
glmfit <- glmFit(x, design)
lrt <- glmLRT(xGlm, coef=1)
lrt <- glmLRT(glmfit, coef=1)
glimmaMA(lrt, counts=x$counts, groups=group)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group)
glimmaMA(lrt, counts=x$counts, groups=group)
library(GlimmaV2)
## DGELRT ##
# estimate dispersion
x <- estimateDisp(x, design)
glmfit <- glmFit(x, design)
lrt <- glmLRT(glmfit, coef=1)
glimmaMA(lrt, counts=x$counts, groups=group)
glimmaMA(lrt,anno=x$genes, counts=x$counts, groups=group)
lrt$genes
rownames(lrt$genes)==rownames(x$counts)
x$counts[keep.exprs,, keep.lib.sizes=FALSE]
x$counts[keep.exprs,]
keep.exprs
data.frame(keep.exprs)
x$counts
data.frame(keep.exprs)
x$counts[keep.exprs,]
length(keep.exprs)
nrow(x$counts)
nrow(genes)
nrow(x$counts)
nrow(lrt$table$logFC)
lnegth(lrt$table$logFC)
length(lrt$table$logFC)
nrow(lrt$genes)
nrow(lrt$genes)
length(keep.exprs)
nrow(x$counts)
lrt$genes
nrow(lrt$genes)
nrow(x$counts)
rownames(lrt$genes)==rownames(x$counts)
rownames(lrt$genes)
rownames(x$counts)
rownames(lrt$genes)
rownames(x$genes)
rownames(x$counts)
x$counts
rownames(lrt)
rownames(lrt)==rownames(x$counts)
glimmaMA(lrt, counts=x$counts, groups=group)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
colnames(x$counts)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
glimmaMA(lrt, counts=data.frame(x$counts), groups=group, width=800)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
group
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
lrt <- glmLRT(glmfit, coef=2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
lrt <- glmLRT(glmfit, coef=6)
lrt <- glmLRT(glmfit, coef=5)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
results <- exactTest(x)
lrt$samples$group
x$samples
x$samples$group
results <- exactTest(x, pair=c("LP","Basal"))
glimmaMA(results, counts=x$counts, groups=group, width=800)
## DESeqDataset ##
dds <- DESeqDataSetFromMatrix(x)
## DESeqDataset ##
library("DESeq2")
dds <- DESeqDataSetFromMatrix(x)
## DESeqDataset ##
library("DESeq2")
dds <- DESeqDataSetFromMatrix(x)
## DESeqDataset ##
library("DESeq2")
x$samples
dds <- DESeqDataSetFromMatrix(countData = x,
colData = x$samples,
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples$group,
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
dds <-as.DESeqDataSet(x)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
colnames(x)
colnames(x$counts)
colnames(x$samples)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = t(x$samples),
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
coldata <- read.csv(pasAnno, row.names=1)
coldata
coldata
coldata
cts
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
cts <- cts[, rownames(coldata)]
cts
coldata
rownames(coldata) <- sub("fb", "", rownames(coldata))
coldata
cts <- cts[, rownames(coldata)]
cts
coldata
cts <- cts[, rownames(coldata)]
rownames(coldata) <- sub("fb", "", rownames(coldata))
colnames(x)
rownames(x$samples)
rownames(x$samples)
colnames(x)
rownames(x$samples)
colnames(x)
rownames(x$samples)
colnames(x)
rownames(x$samples)
colnames(x) ==rownames(x$samples)
colnames(x) ==rownames(x$samples)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
dimnames(x$counts)
dimnames(x$samples)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
colnames(x$counts) <- NULL
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
x$counts
colnames(x$counts)
colnames(x$counts) <- rownames(x$samples)
x$counts
colnames(x$counts)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples,
design = ~group)
dds <- DESeqDataSetFromMatrix(countData = x$counts,
colData = x$samples)
## DESeqDataset ##
library("pasilla", quietly=TRUE)
library("DESeq2", quietly=TRUE)
library(GlimmaV2)
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
rownames(coldata) <- sub("fb", "", rownames(coldata))
cts <- cts[, rownames(coldata)]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds)
glimmaMA(dds)
glimmaMA(dds)
library(GlimmaV2)
glimmaMA(dds)
counts(dds)
colData(dds)
colData(dds)
coldata$condition
library(GlimmaV2)
DESeq2::counts
glimmaMA(dds)
dds$condition
rowData(dds)
glimmaMA(dds)
colData(dds)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition)
library(GlimmaV2)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition, width=400)
glimmaMA(dds, groups=dds$condition, width=600)
library(GlimmaV2)
glimmaMA(dds, groups=dds$condition, width=600)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition)
plotMA(dds)
?plotMA
plotMA(dds, colSig="red", colNonSig="grey")
plotMA(dds, colSig="red", colNonSig="grey")
x <- plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red")
glimmaMA(dds, groups=dds$condition)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(results, counts=x$counts, groups=group, width=800)
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
x$counts
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
x$counts[keep.exprs,]
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
# estimate dispersion
x <- estimateDisp(x, design)
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(fit, counts=counts, groups=groups, width=1000)
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
## DGELRT ##
# estimate dispersion
x <- estimateDisp(x, design)
glmfit <- glmFit(x, design)
lrt <- glmLRT(glmfit, coef=5)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(results, status=NULL, counts=x$counts, groups=group, width=800)
glimmaMA(results, status=1:nrow(results), counts=x$counts, groups=group, width=800)
glimmaMA(results, status=rep(0,nrow(results)), counts=x$counts, groups=group, width=800)
## DGEExact ##
results <- exactTest(x, pair=c("LP","ML"))
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
glimmaMA(fit, counts=counts, groups=groups, width=1000)
# MArrayLM plot
counts <- data.frame(rnaseq$counts)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, width=1000)
library(GlimmaV2)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
glimmaXY(x=fit$lods,y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$p.value,y=fit$lods, counts=counts, groups=groups)
glimmaXY(x=fit$p.value,y=fit$coefficients[,1], counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,3],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,2],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, status=dtFit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
