glimmaMA(dds)
colData(dds)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition)
library(GlimmaV2)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition, width=400)
glimmaMA(dds, groups=dds$condition, width=600)
library(GlimmaV2)
glimmaMA(dds, groups=dds$condition, width=600)
glimmaMA(dds, groups=dds$condition)
glimmaMA(dds, groups=dds$condition)
plotMA(dds)
?plotMA
plotMA(dds, colSig="red", colNonSig="grey")
plotMA(dds, colSig="red", colNonSig="grey")
x <- plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red", colNonSig="grey")
DESeq2::plotMA(dds, colSig="red")
glimmaMA(dds, groups=dds$condition)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(results, counts=x$counts, groups=group, width=800)
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
x$counts
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
x$counts[keep.exprs,]
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
# estimate dispersion
x <- estimateDisp(x, design)
## DGEExact ##
results <- exactTest(x, pair=c("LP","Basal"))
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(fit, counts=counts, groups=groups, width=1000)
### RNASeq 123 dataset ###
library(edgeR, quietly=TRUE)
library(Mus.musculus, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
# load data
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
x <- readDGE(files, columns=c(1,3))
# add sample info
samples <- substring(colnames(x), 12, nchar(colnames(x)))
colnames(x) <- samples
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
# add gene info
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
# transformations from raw scale
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
# remove lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
# normalising gene expression distributions
x <- calcNormFactors(x, method = "TMM")
# generate design
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
## DGELRT ##
# estimate dispersion
x <- estimateDisp(x, design)
glmfit <- glmFit(x, design)
lrt <- glmLRT(glmfit, coef=5)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
glimmaMA(lrt, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
glimmaMA(results, status=NULL, counts=x$counts, groups=group, width=800)
glimmaMA(results, status=1:nrow(results), counts=x$counts, groups=group, width=800)
glimmaMA(results, status=rep(0,nrow(results)), counts=x$counts, groups=group, width=800)
## DGEExact ##
results <- exactTest(x, pair=c("LP","ML"))
glimmaMA(results, counts=x$counts, groups=group, width=800)
library(GlimmaV2)
glimmaMA(results, counts=x$counts, groups=group, width=800)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
glimmaMA(fit, counts=counts, groups=groups, width=1000)
# MArrayLM plot
counts <- data.frame(rnaseq$counts)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, width=1000)
library(GlimmaV2)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
class(fit)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
glimmaXY(x=fit$lods,y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$p.value,y=fit$lods, counts=counts, groups=groups)
glimmaXY(x=fit$p.value,y=fit$coefficients[,1], counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,3],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,2],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, counts=counts, groups=groups)
glimmaXY(x=fit$coefficients[,1],y=fit$p.value, status=dtFit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, width=)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups, width=400)
glimmaMA(fit, counts=counts, groups=groups, height=500)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups, height=700)
glimmaMA(fit, counts=counts, groups=groups, height=800)
glimmaMA(fit, counts=counts, groups=groups, width=800, height=800)
glimmaMA(fit, counts=counts, groups=groups, width=700, height=700)
library(GlimmaV2)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, width=700, height=700)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups, width=700, height=700)
glimmaMA(fit, counts=counts, groups=groups, width=700, height=700)
glimmaMA(fit, counts=counts, groups=groups, width=700, height=700)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=600)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=800)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=800)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, width=900, height=800)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=900)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=600)
library(GlimmaV2)
library(GlimmaV2)
### TEST: glimmav1 dataset (MArrayLM) ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=900)
glimmaMA(fit, counts=counts, groups=groups, width=850, height=850)
glimmaMA(fit, counts=counts, groups=groups, width=870, height=870)
glimmaMA(fit, counts=counts, groups=groups, width=860, height=860)
glimmaMA(fit, counts=counts, groups=groups, width=900, height=860)
glimmaMA(fit, counts=counts, groups=groups, width=910, height=860)
glimmaMA(fit, counts=counts, groups=groups, width=860, height=860)
library(GlimmaV2)
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups)
library(GlimmaV2)
glimmaMA(fit, counts=counts, groups=groups)
glimmaMA(fit, counts=counts, groups=groups, status.colours=c("deepblue","darkgrey","pink"))
glimmaMA(fit, counts=counts, groups=groups, status.colours=c("teal","darkgrey","orange"))
glimmaMA(fit, counts=counts, groups=groups, status.colours=c("aqua","darkgrey","hotpink"))
# MArrayLM plot
counts <- rnaseq$counts
groups <- rnaseq$samples$group
glimmaMA(fit, counts=counts, groups=groups, status.colours=c("#3977db","#3d3f42","#db0d4e"))
glimmaMA(fit, counts=counts, groups=groups, status.colours=c("rgb(219,13,78)","#3d3f42","#db0d4e"))
### TEST: glimmav1 dataset ###
library(Glimma)
library(limma)
library(GlimmaV2)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- rnaseq$samples$group
# fit
design <- model.matrix(~0+groups)
contrasts <- cbind(Smchd1null.vs.WT=c(-1,1))
# convert raw counts to logCPM values by automatically extracting libsizes and normalisation factors from x
vm <- voomWithQualityWeights(rnaseq, design=design)
fit <- lmFit(vm, design=design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)
dtFit <- decideTests(fit)
# baseline
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, counts=rnaseq$counts, groups=rnaseq$samples$group)
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, counts=counts, groups=groups, status.colours=("cyan", "green", "purple"))
# baseline
counts = rnaseq$counts
groups = rnaseq$samples$group
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, counts=counts, groups=groups, status.colours=c("cyan", "green", "purple"))
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, counts=counts, groups=groups, status.colours=c("cyan", "yellow", "purple"))
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, counts=counts, groups=groups, status.colours=c("cyan", "grey", "hotpink"))
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, status.colours=c("cyan", "grey", "hotpink"))
rownames(fit$coef)
library(GlimmaV2)
# baseline
counts = rnaseq$counts
groups = rnaseq$samples$group
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, status.colours=c("cyan", "grey", "hotpink"))
glimmaXY(x=1:rnow(rnaseq), y=fit$lod, status=dtFit, status.colours=c("cyan", "grey", "hotpink"))
glimmaXY(x=1:nrow(rnaseq), y=fit$lod, status=dtFit, status.colours=c("cyan", "grey", "hotpink"))
glimmaXY(x=fit$coef, y=fit$lod, status=dtFit, status.colours=c("cyan", "grey", "hotpink"))
### DGEList TEST ###
# need old Glimma for this dataset
library(Glimma, quietly=TRUE)
library(GlimmaV2, quietly=TRUE)
data(lymphomaRNAseq)
rnaseq <- lymphomaRNAseq
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add libsize
groups <- cbind(groups, libsize=rnaseq$samples$lib.size)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
is.numeric(groups)
is.numeric(groups$genotype)
is.numeric(groups$lane)
is.numeric(groups$miscCont)
is.numeric(groups$miscDisc)
is.numeric(groups$libsize)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
sapply(groups, is.numeric)
# add lane
groups <- matrix(genotype=rnaseq$samples$group,
lane= as.character(c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add lane
groups <- matrix(rnaseq$samples$group,
as.character(c(rep(4,5),3,3)),
c(rep(4000,5),300,250),
c("blue","red",rep("green",5)))
# add lane
groups <- matrix(genotype=rnaseq$samples$group,
lane= (c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
# add lane
groups <- data.frame(genotype=rnaseq$samples$group,
lane= (c(rep(4,5),3,3)),
miscCont=c(rep(4000,5),300,250),
miscDisc=c("blue","red",rep("green",5)))
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
glimmaMDS(rnaseq, groups=groups, continuous.colour=TRUE)
